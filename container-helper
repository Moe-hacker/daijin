#!/data/data/com.termux/files/usr/bin/bash
# ██╗ ██╗  ██╗ ██████╗  █████╗   ███████╗ ██╗  ██╗
#████████╗ ██║ ██╔══██╗ ██╔══██╗ ██╔════╝ ██║  ██║
#╚██╔═██╔╝ ██║ ██████╔╝ ███████║ ███████╗ ███████║
#████████╗ ╚═╝ ██╔══██╗ ██╔══██║ ╚════██║ ██╔══██║
#╚██╔═██╔╝ ██╗ ██████╔╝ ██║  ██║ ███████║ ██║  ██║
# ╚═╝ ╚═╝  ╚═╝ ╚═════╝  ╚═╝  ╚═╝ ╚══════╝ ╚═╝  ╚═╝
###### Github@Moe-hacker ######
#正常情况下，container的容器编号为1至100，通过export调用container-编号.conf
#container-helper则是创建一个编号为helper的容器并调用container运行
VERSION=1.0
if [[ ! -e /data/data/com.termux/files/usr/bin/container ]];then
    echo -e "检测到您未安装termux-container，正在为您安装..."
    sleep 1s
    pkg install pv git wget tsu curl e2fsprogs nano whiptail
    mkdir -p ~/.termux >> /dev/null
    mkdir -p /data/data/com.termux/files/usr/share/termux-container
    git clone https://github.com/Moe-hacker/termux-container /data/data/com.termux/files/usr/share/termux-container
    cd /data/data/com.termux/files/usr/share/termux-container
    cp container-zh /data/data/com.termux/files/usr/bin/container
    cp container-helper /data/data/com.termux/files/usr/bin/
    chmod 777 /data/data/com.termux/files/usr/bin/container
    chmod 777 /data/data/com.termux/files/usr/bin/container-helper
    mkdir -p /data/data/com.termux/files/usr/etc/container
    echo DISABLE_SELINUX=n >> /data/data/com.termux/files/usr/etc/container/global.conf
    echo ENABLE_OUTPUT=n >> /data/data/com.termux/files/usr/etc/container/global.conf
    echo HOSTNAME=localhost >> /data/data/com.termux/files/usr/etc/container/global.conf
    echo CURSOR=bar >> /data/data/com.termux/files/usr/etc/container/global.conf
    echo CONTAINER=helper >> /data/data/com.termux/files/usr/etc/container/global.conf
    touch /data/data/com.termux/files/usr/etc/container/container-helper.conf
    cp font.ttf ~/.termux/
    termux-reload-settings
    echo -e "安装完成，输入container-helper启动本脚本"
    sleep 2s
fi
if [[ $(whoami) != "root" ]];then #判断用户，若不是root则调用sudo重新启动
    sudo container-helper
    exit 0
fi
CREATE_CONTAINER(){
    ARCH=$(uname -m)
    if [[ $ARCH != "aarch64" ]];then
        echo -e "container-helper目前仅支持aarch64架构的安卓系统"
        exit
    fi
    OS=$1
    if [[ -e /data/container/$OS ]];then
        echo "您已安装$OS"
        exit 0
    fi
    case $OS in
        "kali") echo -e "检测到您要安装的是kali系统，请勿违反当地法律使用!";;
    esac
    echo -e "容器将被安装至/data/container/$OS"
    sleep 2s
    mkdir -p /data/container/$OS
    wget https://github.com/TermuxCHN/rootfs/releases/download/rootfs/$OS.tar.xz
    tar -xvf $OS.tar.xz -C /data/container/$OS
    cp /data/data/com.termux/files/usr/share/termux-container/helper-start /data/data/com.termux/files/home/$OS
    sed -i "s/OS/$OS/" /data/data/com.termux/files/home/$OS
    chmod 777 /data/data/com.termux/files/home/$OS
    echo -e "若要删除容器，请务必使用本脚本而不是强删，否则可能导致数据丢失!!!"
    echo -e "容器已被安装至/data/container/$OS"
    echo -e "安装完毕,输入 ~/$OS 启动系统"
    rm $OS.tar.xz
    return 0
    exit 0
}
REMOVE_CONTAINER(){
    OS=$1
    if [[ ! -e /data/container/$OS ]];then
        echo "您未安装$OS"
        exit 0
    fi
    read -p "按回车键确认卸载$OS,或者按ctrl-c取消" NULL
    sleep 3s
    CHROOT_DIR=/data/container/$OS
    umount -lvf ${CHROOT_DIR}/dev >> /dev/null 2>&1 #解除/dev的挂载
    umount -lvf ${CHROOT_DIR}/sys >> /dev/null 2>&1 #解除/sys的挂载
    umount -lvf ${CHROOT_DIR}/proc >> /dev/null 2>&1 #解除/proc挂载
    umount ${CHROOT_DIR}/sdcard >> /dev/null 2>&1 #解除/sdcard的挂载
    umount -lvf ${CHROOT_DIR} >> /dev/null 2>&1 #解除目录自身挂载
    rm -rfv /data/container/$OS
    rm -rvf /data/data/com.termux/files/home/$OS
    echo -e "卸载完毕!"
    return 0
    exit 0
}
UNMOUNT_ALL(){
    if [[ $(ls /data/container) != "" ]];then
        for i in $(ls /data/container)
        do
            umount -lvf /data/container/$i/dev >> /dev/null 2>&1
            umount -lvf /data/container/$i/proc >> /dev/null 2>&1
            umount -lvf /data/container/$i/sys >> /dev/null 2>&1
            umount -lvf /data/container/$i >> /dev/null 2>&1
            umount /data/container/$i/sdcard >> /dev/null 2>&1
        done
    fi
    return 0
    exit 0
}
LIST_INSTALLED(){
    if [[ $(ls /data/container) != "" ]];then
        echo -e "您安装的系统有:$(ls /data/container)"
    else
        echo -e "您未安装任何系统!"
    fi
    return 0
    exit 0
}
MENU(){
    echo -e "1. 安装ubuntu     9. 卸载ubuntu "
    echo -e "2. 安装centos     10.卸载centos"
    echo -e "3. 安装fedora     11.卸载fedora"
    echo -e "4. 安装debian     12.卸载debian"
    echo -e "5. 安装archlinux  13.卸载archlinux"
    echo -e "6. 安装parrot     14.卸载parrot"
    echo -e "7. 安装kali       15.卸载kali"
    echo -e "8. 安装alpine     16.卸载alpine"
    echo -e "17.查询已安装     18.更新脚本"
    echo -e "19.版本信息       20.卸载此脚本"
    read -p "选择一个操作:" OPTION
    case $OPTION in
        "1") CREATE_CONTAINER ubuntu;;
        "2") CREATE_CONTAINER centos;;
        "3") CREATE_CONTAINER fedora;;
        "4") CREATE_CONTAINER debian;;
        "5") CREATE_CONTAINER archlinux;;
        "6") CREATE_CONTAINER parrot;;
        "7") CREATE_CONTAINER kali;;
        "8") CREATE_CONTAINER alpine;;
        "9") REMOVE_CONTAINER ubuntu;;
        "10")REMOVE_CONTAINER centos;;
        "11")REMOVE_CONTAINER fedora;;
        "12")REMOVE_CONTAINER debian;;
        "13")REMOVE_CONTAINER archlinux;;
        "14")REMOVE_CONTAINER parrot;;
        "15")REMOVE_CONTAINER kali;;
        "16")REMOVE_CONTAINER alpine;;
        "17")LIST_INSTALLED;;
        "18")container -up;;
        "19")echo "version:$VERSION";;
        "20")UNMOUNT_ALL&&container -U;;
    esac
    return 0
}
MENU
