#!/data/data/com.termux/files/usr/bin/bash
# ██╗ ██╗  ██╗ ██████╗  █████╗   ███████╗ ██╗  ██╗
#████████╗ ██║ ██╔══██╗ ██╔══██╗ ██╔════╝ ██║  ██║
#╚██╔═██╔╝ ██║ ██████╔╝ ███████║ ███████╗ ███████║
#████████╗ ╚═╝ ██╔══██╗ ██╔══██║ ╚════██║ ██╔══██║
#╚██╔═██╔╝ ██╗ ██████╔╝ ██║  ██║ ███████║ ██║  ██║
# ╚═╝ ╚═╝  ╚═╝ ╚═════╝  ╚═╝  ╚═╝ ╚══════╝ ╚═╝  ╚═╝
###### Github@Moe-hacker ######
#❀我萌故我在❀
#•.,¸,.•*¯`•.,¸,.•....╭━━━━━━━━━╮
#`•.,¸,.•*¯`•.,¸,.•*¯.|::::::::::/\__/\
#`•.,¸,.•*¯`•.,¸,.•* <|:::::::::(｡ ●ω●｡)
#`•.,¸,.•*¯`•.,¸,.•*  ╰し--し--Ｊ･ﾟ
#编程第一法则:如果你的代码不知道为啥能跑起来，就别再动它了。
#编程第二法则:多个人拉的屎放一起会炸
#编程第三法则:老代码不要乱动，因为你可能也不知道你写的什么
#编程第四法则:如果一个功能太难实现，那就放弃
#借鉴了一部分andrax启动脚本,nethunter启动脚本和tmoe故采用相同的许可证。
###### E-mail: moe-hacker@outlook.com ######
######   Blog: moe-hacker.github.io   ######
####################
######日志管理######
####################
export RUN_WITH=$@
export LOG_FILE="/data/data/com.termux/files/usr/var/log/container.log"
CONTAINER_LOG_HEAD(){
  echo "------------------LOG START----------------------" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] RUN WITH \"$RUN_WITH\"" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] ARCH: $(uname -m)" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] KERNEL: $(uname -r)" >> ${LOG_FILE}
  echo "[$(date +%Y-%m-%d\ %H:%M:%S)] ANDROID: $(getprop ro.build.version.release)" >> ${LOG_FILE}
  if [[ -e /data/data/com.termux/files/usr/etc/container/global.conf ]];then
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] GLOBAL CONFIG:" >> ${LOG_FILE}
    export $(cat /data/data/com.termux/files/usr/etc/container/global.conf)
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] DISABLE_SELINUX=${DISABLE_SELINUX}" >> ${LOG_FILE}
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] ENABLE_OUTPUT=${ENABLE_OUTPUT}" >> ${LOG_FILE}
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] HOSTNAME=${HOSTNAME}" >> ${LOG_FILE}
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] CURSOR=${CURSOR}" >> ${LOG_FILE}
    echo "[$(date +%Y-%m-%d\ %H:%M:%S)] CONTAINER=${CONTAINER}" >> ${LOG_FILE}
  fi
}
CONTAINER_LOG(){
  echo -e "[$(date +%Y-%m-%d\ %H:%M:%S)] $@" >> ${LOG_FILE}
}
CONTAINER_LOG_END(){
  echo "-------------------LOG END-----------------------" >> ${LOG_FILE}
}
####################
######安装程序######
####################
if [[ ! -e /data/data/com.termux/files/usr/bin/container ]];then #安装程序
  CONTAINER_LOG_HEAD
  echo -e "\e[38;5;159m[] INSTALLING FONTS"
  mv ~/.termux/font.ttf ~/.termux/font-backup.ttf
  wget https://github.com/Moe-hacker/termux-container/raw/main/font.ttf
  if [[ -e font.ttf ]];then
    mv font.ttf ~/.termux/font.ttf
    termux-reload-settings
    CONTAINER_LOG "INSTALLED FONTS"
  else
    mv ~/.termux/font-backup.ttf ~/.termux/font.ttf
    echo "Failed to download fonts,please check your network"
    sleep 2s
    CONTAINER_LOG "FAILED TO INSTALL FONTS"
  fi
  clear
  printf '\e[6 q'
  printf '\033[?25l'
  i1=$(($(stty size|awk '{print $2}')))
  let i1=$i1
  i4=$(($i1/2-22))
  echo -e "\033[${i4}G              \e[38;5;157m┌───────────┐"
  echo -e "\033[${i4}G              │ ┌───────┐ │"
  echo -e "\033[${i4}G              │ │  \e[38;5;227m┌───────────┐"
  echo -e "\033[${i4}G              \e[38;5;157m│ │  \e[38;5;227m│ ┌───────┐ │"
  echo -e "\033[${i4}G              \e[38;5;157m│ │  \e[38;5;227m│ │  \e[38;5;157m│ │  \e[38;5;227m│ │"
  echo -e "\033[${i4}G              \e[38;5;157m│ └──\e[38;5;227m│ │\e[38;5;157m──┘ │  \e[38;5;227m│ │"
  echo -e "\033[${i4}G              \e[38;5;157m└────\e[38;5;227m│ │\e[38;5;157m────┘  \e[38;5;227m│ │"
  echo -e "\033[${i4}G                   \e[38;5;227m│ └───────┘ │"
  echo -e "\033[${i4}G                   \e[38;5;227m└───────────┘"
  echo -e "\033[${i4}G\e[38;5;153m═╔╝╔═╝╔═║╔╔ ║ ║║ ║  ╔═╝╔═║╔═ ═╔╝╔═║╝╔═ ╔═╝╔═║"
  echo -e "\033[${i4}G ║ ╔═╝╔╔╝║║║║ ║ ╝ ═╝║  ║ ║║ ║ ║ ╔═║║║ ║╔═╝╔╔╝"
  echo -e "\033[${i4}G ╝ ══╝╝ ╝╝╝╝══╝╝ ╝  ══╝══╝╝ ╝ ╝ ╝ ╝╝╝ ╝══╝╝ ╝"
  i2=0
  while (( $i2<=$i1 ));do
      i2=$(($i2+1))
      echo -e "\e[38;5;159m\033[13H\033[${i2}G="
      sleep 0.01s
  done
  i5=$(($i4+9))
  echo -e "\033[${i5}G\e[38;5;159mMADE WITH  BY MOE-HACKER"|pv -qL 20
  echo -e "\033[${i5}G\e[38;5;159m    KEEP MOE KEEP COOL"|pv -qL 20
  echo -e "\033[${i5}G\e[38;5;159m       NO WARRANTY"|pv -qL 20
  echo -e "\033[${i5}G\e[38;5;159m PRESS ENTER TO CONTINUE"|pv -qL 20
  i2=0
  printf '\033[?25h'
  read
  clear
  curl -L https://raw.githubusercontent.com/Moe-hacker/termux-container/main/LICENSE
  read -p "[] PRESS ENTER TO ACCEPT THIS OR PRESS CTRL-C TO EXIT" NULL
  CONTAINER_LOG "ACCEPTED LICENSE"
  clear
  echo -e "\a\e[38;5;159m[] INSTALLING PACKAGES"|pv -qL 20
  pkg install p7zip tar unzip zip git wget tsu curl e2fsprogs nano whiptail
  CONTAINER_LOG "INSTALLED DEPENDS"
  clear
  echo -e "\a\e[38;5;159m[] CLONING REPOSITORY"|pv -qL 20
  mkdir -p /data/data/com.termux/files/usr/share/termux-container
  git clone https://github.com/Moe-hacker/termux-container /data/data/com.termux/files/usr/share/termux-container||exit
  cd /data/data/com.termux/files/usr/share/termux-container
  cp container /data/data/com.termux/files/usr/bin/
  chmod 777 /data/data/com.termux/files/usr/bin/container
  clear
  CONTAINER_LOG "SCRIPT INSTALLED"
  echo -e "\a\e[38;5;159m[] CONFIGURE"|pv -qL 20
  CONTAINER_LOG "START CONFIGURE"
  while :
  do
    read -p "[] DISABLE SELinux(Hazard settings)?[y/n]: " DISABLE_SELINUX
    if [[ ${DISABLE_SELINUX} = "n" || ${DISABLE_SELINUX} = "y" ]];then
      break
    fi
  done
  while :
  do
    read -p "[] ENTER YOUR HOSTNAME: " HOSTNAME
    if [[ ${HOSTNAME} != "" ]];then
      break
    fi
  done
  while :
  do
    read -p "[] ENABLE OUTPUT?[y/n]: " ENABLE_OUTPUT
    if [[ ${ENABLE_OUTPUT} = "n" || ${ENABLE_OUTPUT} = "y" ]];then
      break
    fi
  done
  while :
  do
  echo -e "[] CHOOSE YOUR CURSOR: "
    read -p '[1]: $|   [2]: $▂   [3]: $█ ' CURSOR
    if [[ ${CURSOR} = "1" || ${CURSOR} = "2" || ${CURSOR} = "3" ]];then
      break
    fi
  done
  case ${CURSOR} in
    1) CURSOR=bar;;
    2) CURSOR=underline;;
    3) CURSOR=block;;
  esac
  printf '\e[2 q\033[0m'
  CONTAINER_LOG "CONFIG IS DISABLE_SELINUX=${DISABLE_SELINUX} ENABLE_OUTPUT=${ENABLE_OUTPUT} HOSTNAME=${HOSTNAME} CURSOR=${CURSOR}"
  mkdir -p /data/data/com.termux/files/usr/etc/container
  echo DISABLE_SELINUX=${DISABLE_SELINUX} >> /data/data/com.termux/files/usr/etc/container/global.conf
  echo ENABLE_OUTPUT=${ENABLE_OUTPUT} >> /data/data/com.termux/files/usr/etc/container/global.conf
  echo HOSTNAME=${HOSTNAME} >> /data/data/com.termux/files/usr/etc/container/global.conf
  echo CURSOR=${CURSOR} >> /data/data/com.termux/files/usr/etc/container/global.conf
  echo CONTAINER=1 >> /data/data/com.termux/files/usr/etc/container/global.conf
  clear
  echo -e "\e[38;5;159mGood things are coming"|pv -qL 30
  i2=0
  while (( $i2<=60 ))
  do
    for i in {16,17,18,19,20,21,27,33,32,39,45,51,45,39,32,33,27,21,20,19,18,17,16}
    do
      echo -e "\e[1H\e[25G\e[38;5;${i}m●"&&sleep 0.05s&&i2=$(($i2+1))
    done
  done
  CONTAINER_LOG_END
  container -h&&exit 0
fi
####################
######权限判断######
####################
if [[ $(whoami) != "root" ]];then #判断用户，若不是root则调用sudo重新启动
  sudo container $@
  exit 0
fi
####################
######配置检查######
####################
CHECKOUT(){ #配置兼容性检查和空配置检查
  if [[ ! -e /data/data/com.termux/files/usr/etc/container/global.conf ]];then  #空全局配置检查
    CONTAINER_LOG "CONFIG NOT FOUND"
    echo -e "\033[31m\a[] ERR:CONFIG FILE /data/data/com.termux/files/usr/etc/container/global.conf DOES NOT EXIST"
    exit
  fi
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  if [[ ! -e /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf ]];then  #不存在的容器配置检查
    if [[ $( ls /data/data/com.termux/files/usr/etc/container|grep container ) != "" ]];then
      cd /data/data/com.termux/files/usr/etc/container
      for i in {1..100};do
        if [[ -e container-${i}.conf ]];then
          export $(cat container-${i}.conf)
          echo -e "\e[38;5;159m[$i] $NAME"
        fi
      done
      export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
      export CONTAINER_BK=${CONTAINER}
      unset CONTAINER
      while :
      do
        read -p "[] SELECT A CONTAINER: " CONTAINER
        if [[ -e /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf ]];then
          break
        fi
      done
      CONTAINER_LOG "SET CONTAINER=${CONTAINER}"
      sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" /data/data/com.termux/files/usr/etc/container/global.conf
    else
      CONTAINER_LOG "NO CONTAINERS FOUND"
      echo -e "\033[31m\a[] ERR:YOU SHOULD CREATE A CONTAINER FIRST"
      CONTAINER_LOG_END&&exit
    fi
  fi
  return 0
}
####################
######容器备份######
####################
CONTAINER_BACKUP(){  #用于备份容器
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_BACKUP$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  printf "\e[38;5;159m"
  cd /data/data/com.termux/files/usr/etc/container
  #遍历查找配置文件
  for i in {1..100};do
    if [[ -e container-${i}.conf ]];then
      export $(cat container-${i}.conf)
      echo -e "[$i] $NAME"
      sleep 0.3s
    fi
  done
  while :
  do
    read -p "[] SELECT A CONTAINER TO BACKUP: " CONTAINER
    if [[ -e /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf ]];then
      break
    fi
  done
  export $(cat /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf)
  #开始解除挂载
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] UNMOUNTING"
  umount -lvf ${CHROOT_DIR}/dev >> ${LOG_FILE} 2>&1 #解除/dev的挂载
  umount -lvf ${CHROOT_DIR}/sys >> ${LOG_FILE} 2>&1 #解除/sys的挂载
  umount -lvf ${CHROOT_DIR}/proc >> ${LOG_FILE} 2>&1 #解除/proc挂载
  umount ${CHROOT_DIR}/sdcard >> ${LOG_FILE} 2>&1 #解除/sdcard的挂载
  umount -lvf ${CHROOT_DIR} >> ${LOG_FILE} 2>&1 #解除目录自身挂载
  losetup -d ${CHROOT_IMG} >> ${LOG_FILE} 2>&1 #解除img镜像与虚拟设备的关联
  #移动配置文件，不直接备份防止还原时覆盖其他容器配置
  mkdir -p /data/data/com.termux/files/usr/tmp/termux-container
  cp container-${CONTAINER}.conf /data/data/com.termux/files/usr/tmp/termux-container/container.conf
  clear
  #选择格式
  echo -e "[] CHOOSE THE FILE FORMAT: "
  while :
  do
    read -p "[1]tar.gz [2]tar.xz [3]tar [4]7z [5]tar.bz2 [6]zip " FORMAT
    if [[ $FORMAT = "1" || $FORMAT = "2" || $FORMAT = "3" || $FORMAT = "4" || $FORMAT = "5" || $FORMAT = "6" ]];then
      break
    fi
  done
  CONTAINER_LOG "BACKUP CONTAINER ${CONTAINER}"
  #备份,使用tar
  TARGET=/sdcard/container-${NAME}-$(date +%y%m%d%H%M%S)
  case ${FORMAT} in
    1) tar -zcvPf ${TARGET}.tar.gz ${CHROOT_DIR} ${CHROOT_IMG} /data/data/com.termux/files/usr/tmp/termux-container&&echo -e "[] BACKUP FILE IS ${TARGET}.tar.gz" ;;
    2) tar -JcvPf ${TARGET}.tar.xz ${CHROOT_DIR} ${CHROOT_IMG} /data/data/com.termux/files/usr/tmp/termux-container&&echo -e "[] BACKUP FILE IS ${TARGET}.tar.xz" ;;
    3) tar -cvPf ${TARGET}.tar ${CHROOT_DIR} ${CHROOT_IMG} /data/data/com.termux/files/usr/tmp/termux-container&&echo -e "[] BACKUP FILE IS ${TARGET}.tar" ;;
    4) 7z a ${TARGET}.7z ${CHROOT_DIR} /data/data/com.termux/files/usr/tmp/termux-container&&echo -e "[] BACKUP FILE IS ${TARGET}.7z" ;;
    5) tar -vcjf ${TARGET}.tar.bz2 ${CHROOT_DIR} /data/data/com.termux/files/usr/tmp/termux-container&&echo -e "[] BACKUP FILE IS ${TARGET}.tar.bz2" ;;
    6) zip -q -r ${TARGET}.zip ${CHROOT_DIR} /data/data/com.termux/files/usr/tmp/termux-container&&echo -e "[] BACKUP FILE IS ${TARGET}.zip"
  esac
  CONTAINER_LOG "BACKUP FINISHED"
  return 0
  exit 0
}
####################
######容器还原######
####################
CONTAINER_RESTORE(){  #用于还原容器
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-17))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_RESTORE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  printf "\e[38;5;159m"
  sleep 1s
  #直接还原到根目录
  CONTAINER_LOG "RESTORE CONTAINER"
  case $1 in
    *tar.gz) tar -xzvPf $1 -C /;;
    *tar.xz) tar -xvPf $1 -C /;;
    *tar.bz2) tar -vxjf $1 -C /;;
    *7z) 7za x $1 -r -o/ ;;
    *zip) zip $1 -d /;;
    *tar)    tar -xvPf $1 -C /
    *) echo -e "\033[31m[] ERR:UNKNOW FILE FORMAT";exit 0;;
  esac
  CONTAINER_LOG "RESTORE FINISHED"
  cd /data/data/com.termux/files/usr/tmp/termux-container
  printf "\033[0m"
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  for i1 in {1..100};do
    if [[ ! -e /data/data/com.termux/files/usr/etc/container/container-${i1}.conf ]];then
      CONTAINER=$i1
      break
    fi
  done
  mkdir -p /data/data/com.termux/files/usr/etc/container >> ${LOG_FILE}
  mv container.conf /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf
  CONTAINER_LOG "SET CONTAINER=${CONTAINER}"
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" /data/data/com.termux/files/usr/etc/container/global.conf
  return 0
  exit 0
}
####################
######容器创建######
####################
CONTAINER_CREATE(){  #用于容器创建
  CONTAINER_LOG "CREATE CONTAINER"
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_CREATE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  sleep 0.1s
  printf  "\e[38;5;159m"
  #读取容器信息
  while :
  do
    read -p "[] ENTER THE NAME OF THIS CONTAINER: " NAME
    if [[ $NAME != "" ]];then
      break
    fi
  done
  echo -e "[] THE CONTAINER ABSOLUTE PATH IS THE DIRECTORY USED TO STORE THE CONTAINER,FOR EXAMPLE,YOU CAN USE /data/container-name"|pv -qL 40
  read -p "[] ENTER THE ABSOLUTE PATH OF THIS CONTAINER: " CHROOT_DIR
  for BLACKLIST in {/bin/,/dev/,/odm/,/oem/,/proc/,/product/,/sys/,/system/,/vendor/};do #目录黑名单,拒绝使用系统目录
    if [[ $CHROOT_DIR = $BLACKLIST* ]];then
      CONTAINER_LOG "ERR:CONTAINER ABSOLUTE PATH IS IN BLACKLIST"
      echo "[] REFUSE TO USE SYSTEM DIRECTORY"
      CONTAINER_LOG_END&&exit
    fi
  done
  if [[ -e $CHROOT_DIR ]];then #拒绝使用已存在的目录
    CONTAINER_LOG "ERR:CONTAINER ABSOLUTE PATH IS EXIST"
    echo -e "[] DIRECTORY ALREADY EXISTS"
    CONTAINER_LOG_END&&exit
  fi
  echo -e "[] THIS IS JUST AN EXPERIMENTAL FEATURE TO INSTALL CONTAINER WITH AN IMAGE FILE"|pv -qL 40
  while :
  do
    read -p "[] DO YOU WANT TO INSTALL THIS CONTAINER IN AN IMAGE FILE [y/n]?" USE_IMAGE
    if [[ ${USE_IMAGE} = "n" || ${USE_IMAGE} = "y" ]];then
      break
    fi
  done
  if [[ ${USE_IMAGE} = "y" ]];then #判断是否使用镜像
    echo -e "[] THE IMAGE FILE ABSOLUTE PATH IS THE DIRECTORY USED TO STORE THE IMAGE FILE,FOR EXAMPLE,YOU CAN USE /data"|pv -qL 40
    while :
    do
      read -p "[] ENTER THE ABSOLUTE PATH OF IMAGE FILE: " CHROOT_IMG_PATH
      if [[ $CHROOT_IMG_PATH != "" ]];then
        break
      fi
    done
    for BLACKLIST in {/bin/,/dev/,/odm/,/oem/,/proc/,/product/,/sys/,/system/,/vendor/};do #目录黑名单,拒绝使用系统目录
      if [[ $CHROOT_IMG_PATH = $BLACKLIST* ]];then
        CONTAINER_LOG "ERR:IMAGE FILE ABSOLUTE PATH IS IN BLACKLIST"
        echo "[] REFUSE TO USE SYSTEM DIRECTORY "
        CONTAINER_LOG_END&&exit
      fi
    done
    while :
    do
      read -p "[] ENTER THE NAME OF IMAGE FILE: " CHROOT_IMG_NAME
      if [[ $CHROOT_IMG_NAME != "" ]];then
        break
      fi
    done
    while :
    do
      read -p "[] ENTER THE SIZE OF IMAGE FILE(UNIT IS GB): " SIZE
      if [[ $SIZE != "" ]];then
        break
      fi
    done
  fi
  echo -e "[] YOU CAN GO TO \033[4mhttps://mirrors.bfsu.edu.cn/lxc-images/images\033[0m\e[38;5;159m TO GET THE LINK OF YOUR ROOTFS OR USE CUSTOM ROOTFS"|pv -qL 40
  while :
  do
    read -p "[] ENTER THE ROOTFS DOWNLOAD LINK OR THE PATH OF YOUR CUSTOM ROOTFS: " URL
    if [[ $URL != "" ]];then
      break
    fi
  done
  CONTAINER_LOG "CREATE CONTAINER:NAME=$NAME,CHROOT_DIR=$CHROOT_DIR,CHROOT_IMG_PATH=$CHROOT_IMG_PATH,CHROOT_IMG_NAME=$CHROOT_IMG_NAME,SIZE=$SIZE,URL=$URL"
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "------CREATE_CONTAINER------"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] DOWNLOADING ROOTFS"|pv -qL 40
  sleep 1s
  rm -rf /data/data/com.termux/files/usr/tmp/container >> ${LOG_FILE} 2>&1
  mkdir -p /data/data/com.termux/files/usr/tmp/container >> ${LOG_FILE} 2>&1
  cd /data/data/com.termux/files/usr/tmp/container >> ${LOG_FILE} 2>&1
  #下载rootfs
  wget ${URL}||cp ${URL} ./||exit
  CONTAINER_LOG "DOWNLOAD ROOTFS:URL=$URL"
  sudo mkdir -p ${CHROOT_DIR}
  if [[ ${CHROOT_IMG_NAME} != "" ]];then  #创建img镜像并挂载
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] CREATING IMAGE FILE"|pv -qL 40
    sudo mkdir -p ${CHROOT_IMG_PATH}
    cd ${CHROOT_IMG_PATH}
    sudo dd if=/dev/zero of=${CHROOT_IMG_NAME}.img bs=1G count=${SIZE}
    CONTAINER_LOG "CREATE IMAGE FILE:NAME=$CHROOT_IMG_NAME,PATH=$CHROOT_IMG_PATH,SIZE=$SIZE"
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] MAKING FILE SYSTEM"|pv -qL 40
    sudo mkfs.ext4 ${CHROOT_IMG_NAME}.img
    CONTAINER_LOG "MAKE FILE SYSTEM"
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] MOUNTING IMAGE FILE"|pv -qL 40
    sleep 1s
    LOOP=$(sudo losetup -f)
    sudo losetup  ${LOOP} ${CHROOT_IMG_NAME}.img  >> ${LOG_FILE} 2>&1
    sudo mount ${LOOP} ${CHROOT_DIR}  >> ${LOG_FILE} 2>&1
    CONTAINER_LOG "MOUNT IMAGE FILE:LOOP=$LOOP,PATH=$CHROOT_DIR"
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] EXTRACTING ROOTFS"|pv -qL 40
  sleep 2s
  #解压rootfs
  ROOTFS=$(ls /data/data/com.termux/files/usr/tmp/container/)
  case $ROOTFS in
    *tar.gz|*tgz|*tar) tar -xzvf /data/data/com.termux/files/usr/tmp/container/$ROOTFS -C ${CHROOT_DIR};;
    *tar.xz|*txz) tar -xvf /data/data/com.termux/files/usr/tmp/container/$ROOTFS -C ${CHROOT_DIR};;
    *) echo "\a\033[31m[] ERR:UNKNOW FILE FORMAT";exit 0;;
  esac
  CONTAINER_LOG "EXTRACT ROOTFS"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[] WRITING CONFIGURE FILE"|pv -qL 40
  sleep 1s
  for i1 in {1..100};do #遍历获取未使用的配置文件
    if [[ ! -e /data/data/com.termux/files/usr/etc/container/container-${i1}.conf ]];then
      CONTAINER=$i1
      break
    fi
  done
  #写入配置
  echo NAME=${NAME} >> /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf
  echo CHROOT_DIR=${CHROOT_DIR} >> /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf
  if [[ ${CHROOT_IMG_NAME} != "" ]];then
    echo CHROOT_IMG=${CHROOT_IMG_PATH}/${CHROOT_IMG_NAME}.img >> /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf
  else
    echo CHROOT_IMG= >> /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf
  fi
  export NEW_CONTAINER=${CONTAINER}
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$NEW_CONTAINER/" /data/data/com.termux/files/usr/etc/container/global.conf
  CONTAINER_LOG "WRITE CONFIGURE FILE"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] REMOVING DOWNLOADED ROOTFS"|pv -qL 40
  sleep 1s
  #清空tmp
  rm -rf /data/data/com.termux/files/usr/tmp/container
  CONTAINER_LOG "REMOVE DOWNLOADED ROOTFS"
  cd /
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] FIXING BUGS"|pv -qL 40
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] CREATE DIRECTORYS"|pv -qL 40
  #创建rootfs中可能不存在的文件
  [[ -e ${CHROOT_DIR}/dev ]]||mkdir ${CHROOT_DIR}/dev
  [[ -e ${CHROOT_DIR}/proc ]]||mkdir ${CHROOT_DIR}/proc
  [[ -e ${CHROOT_DIR}/sys ]]||mkdir ${CHROOT_DIR}/sys
  [[ -e ${CHROOT_DIR}/sdcard ]]||mkdir ${CHROOT_DIR}/sdcard
  CONTAINER_LOG "CREATE DIRECTORYS"
  #修复sudo
  if [[ $(cat ${CHROOT_DIR}/etc/hosts|grep ${HOSTNAME}) = "" ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] FIX SUDO"|pv -qL 40
    echo 127.0.0.1 ${HOSTNAME} >> ${CHROOT_DIR}/etc/hosts #修复sudo报错无法解析主机
    CONTAINER_LOG "FIX SUDO"
  fi
  #修复dns
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] FIX DNS PROBLEM"|pv -qL 40
  rm -f ${CHROOT_DIR}/etc/resolv.conf >> ${LOG_FILE} 2>&1
  echo nameserver 8.8.8.8 >> ${CHROOT_DIR}/etc/resolv.conf
  echo nameserver 114.114.114.114 >> ${CHROOT_DIR}/etc/resolv.conf #解决未设置dns导致无法联网
  CONTAINER_LOG "FIX DNS PROBLEM"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] ADD GROUPS"
  cp /data/data/com.termux/files/usr/share/termux-container/group_add.sh ${CHROOT_DIR}/tmp
  chmod 777 ${CHROOT_DIR}/tmp/group_add.sh
  mount -t proc proc  ${CHROOT_DIR}/proc/
  mount --rbind /dev ${CHROOT_DIR}/dev/
  mount --rbind /sys ${CHROOT_DIR}/sys/
  export PATH_BK=$PATH #备份$PATH
  unset TMP TEMP TMPDIR LD_PRELOAD LD_DEBUG ZPFX ZSH_CACHE PATH #删除部分环境变量
  /bin/chroot ${CHROOT_DIR} /bin/bash -c "bash /tmp/group_add.sh" >> ${LOG_FILE} 2>&1
  export PATH=$PATH_BK
  CONTAINER_LOG "ADD GROUPS"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] UNMOUNT CONTAINER"
  umount -lvf ${CHROOT_DIR}/dev >> ${LOG_FILE} 2>&1 #解除/dev的挂载
  umount -lvf ${CHROOT_DIR}/sys >> ${LOG_FILE} 2>&1 #解除/sys的挂载
  umount -lvf ${CHROOT_DIR}/proc >> ${LOG_FILE} 2>&1 #解除/proc挂载
  umount -lvf ${CHROOT_DIR} >> ${LOG_FILE} 2>&1 #解除目录自身挂载
  losetup -d ${CHROOT_IMG} >> ${LOG_FILE} 2>&1 #解除img镜像与虚拟设备的关联
  CONTAINER_LOG "UNMOUNT CONTAINER"
  echo -e "[] DONE"
  return 0
  exit 0
}
####################
######帮助信息######
####################
CONTAINER_HELP(){  #输出帮助信息
  echo -e "              \e[38;5;157m┌───────────┐"
  echo -e "              │ ┌───────┐ │"
  echo -e "              │ │  \e[38;5;227m┌───────────┐"
  echo -e "              \e[38;5;157m│ │  \e[38;5;227m│ ┌───────┐ │"
  echo -e "              \e[38;5;157m│ │  \e[38;5;227m│ │  \e[38;5;157m│ │  \e[38;5;227m│ │"
  echo -e "              \e[38;5;157m│ └──\e[38;5;227m│ │\e[38;5;157m──┘ │  \e[38;5;227m│ │"
  echo -e "              \e[38;5;157m└────\e[38;5;227m│ │\e[38;5;157m────┘  \e[38;5;227m│ │"
  echo -e "                   \e[38;5;227m│ └───────┘ │"
  echo -e "                   \e[38;5;227m└───────────┘"
  echo -e "\e[38;5;153m═╔╝╔═╝╔═║╔╔ ║ ║║ ║  ╔═╝╔═║╔═ ═╔╝╔═║╝╔═ ╔═╝╔═║"
  echo -e " ║ ╔═╝╔╔╝║║║║ ║ ╝ ═╝║  ║ ║║ ║ ║ ╔═║║║ ║╔═╝╔╔╝"
  echo -e " ╝ ══╝╝ ╝╝╝╝══╝╝ ╝  ══╝══╝╝ ╝ ╝ ╝ ╝╝╝ ╝══╝╝ ╝"
  echo -e "\e[38;5;159mThis script has no Super Cow Powers"
  echo -e "Usage:"
  echo -e " container                   #Show menu"
  echo -e " container -run              #Run container"
  echo -e " container -c                #Creat a new container"
  echo -e " container -S                #Switch container"
  echo -e " container -s                #Settings"
  echo -e " container -r                #Remove a container"
  echo -e " container -m                #Mount image file"
  echo -e " container -un               #Unmount container"
  echo -e " container -bk               #Backup container"
  echo -e " container -R [backup file]  #Restore container"
  echo -e " container -up               #Update this script"
  echo -e " container -v                #Display version"
  echo -e " container -U                #Uninstall this script"
  echo -e " container -h                #Show this page\033[0m"
  return 0
  exit 0
}
####################
######挂载镜像######
####################
CONTAINER_MOUNT(){ #用于挂载镜像
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  export $(cat /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-15))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_MOUNT$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  if [[ ${CHROOT_IMG} = "" ]];then
    echo -e "\a\033[31m[] ERR:NOT USING IMAGE FILE\033[0m"
    CONTAINER_LOG "ERR:NOT USING IMAGE FILE"
    CONTAINER_LOG_END&&exit
  fi
  if [[ ! -e ${CHROOT_IMG} ]];then
    echo -e "\a\033[31m[] ERR:IMAGE FILE DOES NOT EXIST\033[0m"
    CONTAINER_LOG "ERR:IMAGE FILE DOES NOT EXIST"
    CONTAINER_LOG_END&&exit
  fi
  loop=$(sudo losetup -f)
  sudo losetup $loop ${CHROOT_IMG}
  sudo mount $loop ${CHROOT_DIR}
  CONTAINER_LOG "MOUNT IMAGE LOOP=$loop CHROOT_IMG=${CHROOT_IMG} CHROOT_DIR=${CHROOT_DIR}"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[] ${CHROOT_IMG} MOUNTED ON ${CHROOT_DIR} \033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[] DONE\033[0m"
  return 0
  exit 0
}
####################
######容器删除######
####################
CONTAINER_REMOVE(){  #用于删除容器
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_REMOVE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  printf "\e[38;5;159m"
  cd /data/data/com.termux/files/usr/etc/container
  #遍历查找配置文件
  for i in {1..100};do
  if [[ -e container-${i}.conf ]];then
      export $(cat container-${i}.conf)
      echo -e "[$i] $NAME"
  fi
  done
  while :
  do
    read -p "[] SELECT A CONTAINER TO DELEATE: " CONTAINER
    if [[ -e /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf ]];then
      break
    fi
  done
  echo -e "\a[] ALL YOUR FILES IN THIS CONTAINER WILL BE DELEATED"|pv -qL 40
  echo -e "\a[] PRESS ENTER TO CONTINUE OR PRESS CTRL-C TO EXIT"|pv -qL 40
  read
  export $(cat /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf)
  CONTAINER_LOG "REMOVE CONTAINER ${NAME},CHROOT_DIR=${CHROOT_DIR},CHROOT_IMG=${CHROOT_IMG}"
  #解除挂载,防止误删系统文件
  clear
  if [[ ${CHROOT_DIR} = "" ]];then #防止误将宿主机系统文件解除挂载
    rm /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf&&exit
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] UNMOUNTING"
  umount -lvf ${CHROOT_DIR}/dev >> ${LOG_FILE} 2>&1 #解除/dev的挂载
  umount -lvf ${CHROOT_DIR}/sys >> ${LOG_FILE} 2>&1 #解除/sys的挂载
  umount -lvf ${CHROOT_DIR}/proc >> ${LOG_FILE} 2>&1 #解除/proc挂载
  umount ${CHROOT_DIR}/sdcard >> ${LOG_FILE} 2>&1 #解除/sdcard的挂载
  umount -lvf ${CHROOT_DIR} >> ${LOG_FILE} 2>&1 #解除目录自身挂载
  losetup -d ${CHROOT_IMG} >> ${LOG_FILE} 2>&1 #解除img镜像与虚拟设备的关联
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] REMOVING CONTAINER ${NAME}"
  sleep 2s
  #删除旧容器,同时防止执行rm -rf /
  if [[ ${CHROOT_DIR} != "" ]];then
    rm -rfv ${CHROOT_DIR}
  fi
  if [[ ${CHROOT_IMG} != "" ]];then
    rm -rfv ${CHROOT_IMG}
  fi
  rm /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf
  #选择新容器
  unset CONTAINER
  if [[ $( ls /data/data/com.termux/files/usr/etc/container|grep container ) != "" ]];then
    cd /data/data/com.termux/files/usr/etc/container
    for i in {1..100};do
      if [[ -e container-${i}.conf ]];then
        export $(cat container-${i}.conf)
        echo -e "\e[38;5;159m[$i] $NAME"
      fi
    done
    export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
    export CONTAINER_BK=${CONTAINER}
    unset CONTAINER
    while :
    do
      read -p "[] SELECT A CONTAINER: " CONTAINER
      if [[ -e /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf ]];then
        break
      fi
    done
    CONTAINER_LOG "SET CONTAINER=${CONTAINER}"
    sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" /data/data/com.termux/files/usr/etc/container/global.conf
  fi
  printf "\033[0m"
  return 0
  exit 0
}
####################
######容器运行######
####################
CONTAINER_RUN(){ #用于运行容器
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  export $(cat /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf) >> ${LOG_FILE}
  CONTAINER_LOG "CONTAINER CONFIG:"
  CONTAINER_LOG "NAME=${NAME}"
  CONTAINER_LOG "CHROOT_DIR=${CHROOT_DIR}"
  if [[ ${CHROOT_IMG} != "" ]];then
    CONTAINER_LOG "CHROOT_IMG=${CHROOT_IMG}"
  else
    CONTAINER_LOG "CHROOT_IMG=null"
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||printf '\e[38;5;159m\033[?25l'
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-13))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_RUN$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m    _________      [\e[38;5;153m\e[38;5;159m] CONTAINER: \e[38;5;153m${NAME}"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m   /        /\\     [\e[38;5;153m\e[38;5;159m] ARCH: \e[38;5;153m$(uname -m)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  if [[ $DISABLE_SELINUX = "y" ]];then
    SELINUX=Permissive
  else
    SELINUX=Enforcing
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m  /        /  \\    [\e[38;5;153m\e[38;5;159m] SELinux: \e[38;5;153m${SELINUX}"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m /        /    \\   [\e[38;5;153m\e[38;5;159m] KERNEL: \e[38;5;153m$(uname --kernel-release)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m/________/      \\  [\e[38;5;153m\e[38;5;159m] TIME: \e[38;5;153m$(date|awk '{print $4}')"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m\\        \\      /  [\e[38;5;153m\e[38;5;159m] HOST: \e[38;5;153m$(hostname)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||sleep 0.1s
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m \\        \\    /   [\e[38;5;153m\e[38;5;159m] ANDROID: \e[38;5;153m$(getprop ro.build.version.release)"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m  \\        \\  /    [\e[38;5;153m\e[38;5;159m] CHROOT_DIR: \e[38;5;153m${CHROOT_DIR}"
  if [[ $CHROOT_IMG != "" ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] CHROOT_IMG: \e[38;5;153m${CHROOT_IMG}"
  else
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m   \\________\\/     [\e[38;5;153m\e[38;5;159m] CHROOT_IMG: \e[38;5;153mnull"
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m〉\e[38;5;153mTERMUX-CONTAINER"
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m$(yes "─"|sed $i1'q'|tr -d '\n')"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//////"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  if [[ ! -e ${CHROOT_DIR} ]];then #判断容器是否存在
    echo -e "\033[31m\a[] ERR:CONTAINER DIRECTORY DOES NOT EXIST"&&printf "\033[?25h"
    CONTAINER_LOG "ERR:CONTAINER DIRECTORY DOES NOT EXIST"
    CONTAINER_LOG_END&&exit
  fi
  if [[ ${CHROOT_IMG} != "" ]] && [[ ! -e ${CHROOT_IMG} ]];then #如果使用容器镜像，判断其是否存在
    echo -e "\a\033[31m[] ERR:IMAGE FILE DOES NOT EXIST "&&printf "\033[?25h"
    CONTAINER_LOG "ERR:IMAGE FILE DOES NOT EXIST"
    CONTAINER_LOG_END&&exit
  fi
  if [[ ${DISABLE_SELINUX} = "y" ]];then #判断是否需要关闭selinux
    if [[ $(getenforce) != "Permissive" ]];then
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] DISABLE SELINUX"
      CONTAINER_LOG "DISABLE SELINUX"
      setenforce 0 >> ${LOG_FILE} 2>&1 #关闭SELINUX [!]危险操作
    fi
  fi
  if [[ ${HOSTNAME} != "" ]];then #判断主机名设置是否为空值
    if [[ $(hostname) != ${HOSTNAME} ]];then
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] SET HOSTNAME"
      CONTAINER_LOG "SET HOSTNAME=${HOSTNAME}"
      hostname ${HOSTNAME} >> ${LOG_FILE} 2>&1 #设置主机名
    fi
  fi
  #创建一些由于android和普通linux之间的差异而不存在的文件
  if [[ ! -e /dev/fd ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE /dev/fd"
    CONTAINER_LOG "CREATE /dev/fd"
    ln -s /proc/self/fd /dev/ >> ${LOG_FILE} 2>&1
  fi
  if [[ ! -e /dev/stdin ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE /dev/stdin"
    CONTAINER_LOG "CREATE /dev/stdin"
    ln -s /proc/self/fd/0 /dev/stdin  >> ${LOG_FILE} 2>&1
  fi
  if [[ ! -e /dev/stdout ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE /dev/stdout"
    CONTAINER_LOG "CREATE /dev/stdout"
    ln -s /proc/self/fd/1 /dev/stdout >> ${LOG_FILE} 2>&1
  fi
  if [[ ! -e /dev/stderr ]] ;then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE /dev/stderr"
    CONTAINER_LOG "CREATE /dev/stderr"
    ln -s /proc/self/fd/2 /dev/stderr >> ${LOG_FILE} 2>&1
  fi
  if [[ ! -e /dev/tty0 ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE /dev/tty0"
    CONTAINER_LOG "CREATE /dev/tty0"
    ln -s /dev/null /dev/tty0 >> ${LOG_FILE} 2>&1
  fi
  if [[ ! -e /dev/net/tun ]];then
    if [[ ! -d /dev/net ]];then
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE /dev/net"
      mkdir -p /dev/net >> ${LOG_FILE} 2>&1
      fi
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE /dev/net/tun"
      CONTAINER_LOG "CREATE /dev/net"
    mknod /dev/net/tun c 10 200  >> ${LOG_FILE} 2>&1
  fi
  #挂载系统
  if [[ $(mount|grep ${CHROOT_DIR}) =  "" ]];then #判断容器自身是否被挂载，由于容器自身在运行脚本时第一个被挂载，故采用判断挂载点是否为空的方法
    if [[ ${CHROOT_IMG} = "" ]];then
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] REMOUNT /data"
      CONTAINER_LOG "REMOUNT /data WITH SUID"
      mount -o remount,suid /data  >> ${LOG_FILE} 2>&1 #将data 分区重新挂载，启用suid,解决sudo由于nosuid挂载无法使用问题
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT ${CHROOT_DIR} "
      CONTAINER_LOG "MOUNT CHROOT_DIR TO ITSELF"
      mount --rbind ${CHROOT_DIR} ${CHROOT_DIR} >> ${LOG_FILE} 2>&1 #将容器目录挂载到自身，解决pacman无法使用
    else
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] RUN FSCK"
      CONTAINER_LOG "RUN FSCK"
      fsck.ext4 -a -f  ${CHROOT_IMG} >> ${LOG_FILE} 2>&1 #修复结构需要清理报错，有一定效果
      [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT ${CHROOT_IMG} "
      loop=$(losetup -f) #查找未使用的loop文件
      losetup  ${loop} ${CHROOT_IMG}  >> ${LOG_FILE} 2>&1
      mount  ${loop} ${CHROOT_DIR}  >> ${LOG_FILE} 2>&1
      CONTAINER_LOG "MOUNT IMAGE ${CHROOT_IMG} TO ${CHROOT_DIR}"
    fi
  fi
  #挂载内置存储
  if [[ $(mount|grep ${CHROOT_DIR}|grep /sdcard) =  "" ]];then #判断/sdcard是否被挂载
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT /sdacrd"
    CONTAINER_LOG "MOUNT /sdcard"
    mount -o ro,bind /sdcard ${CHROOT_DIR}/sdcard/ >> ${LOG_FILE} 2>&1
  fi
  #挂载系统运行所需文件
  if [[ $(mount|grep ${CHROOT_DIR}|grep /proc) =  "" ]];then #判断/proc是否被挂载
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT /proc"
    mount -t proc proc  ${CHROOT_DIR}/proc/ >> ${LOG_FILE} 2>&1
    CONTAINER_LOG "MOUNT /proc"
  fi
  if [[ ! -e ${CHROOT_DIR}/dev/block ]];then #判断/dev是否被挂载
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT /dev"
    CONTAINER_LOG "MOUNT /dev"
    mount --rbind /dev ${CHROOT_DIR}/dev/ >> ${LOG_FILE} 2>&1
  fi
  if [[ $(mount|grep ${CHROOT_DIR}|grep /sys) =  "" ]];then #判断/sys是否被挂载
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT /sys"
    CONTAINER_LOG "MOUNT /sys"
    mount --rbind /sys ${CHROOT_DIR}/sys/ >> ${LOG_FILE} 2>&1
  fi
  #挂载/dev下一些文件到系统，我也不知道为啥，貌似andrax中就这样写的
  if [[ ! -e /dev/shm ]] || [[ ! -e ${CHROOT_DIR}/dev/shm ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE DIRECTORY /dev/shm"
    mkdir -p /dev/shm ${CHROOT_DIR}/dev/shm >> ${LOG_FILE} 2>&1 #创建/dev/shm
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CREATE tmpfs"
    mount -o rw,nosuid,nodev,mode=1777 -t tmpfs tmpfs /dev/shm >> ${LOG_FILE} 2>&1 #挂载tmpfs
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT /dev/shm"
    CONTAINER_LOG "MOUNT /dev/shm"
    mount --bind /dev/shm ${CHROOT_DIR}/dev/shm >> ${LOG_FILE} 2>&1 #挂载/dev/shm
  fi
  if  [[ ! -e ${CHROOT_DIR}/dev/pts/1 ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] MOUNT /dev/pts"
    mkdir -p ${CHROOT_DIR}/dev/pts >> ${LOG_FILE} 2>&1
    CONTAINER_LOG "MOUNT /dev/pts"
    mount --bind /dev/pts ${CHROOT_DIR}/dev/pts >> ${LOG_FILE} 2>&1
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] CHANGE MODE OF /dev/null"
    CONTAINER_LOG "CHANGE MODE OF /dev/null"
    chmod 666 /dev/null >> ${LOG_FILE} 2>&1
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] RUN CONTAINER"
  case $CURSOR in #更换光标
    block)     printf '\e[2 q';;
    bar)       printf '\e[6 q';;
    underline) printf '\e[4 q';;
  esac
  printf "\033[?25h\033[0m"
  export PATH_BK=$PATH #备份$PATH
  CONTAINER_LOG "RUN CONTAINER"
  unset TMP TEMP TMPDIR LD_PRELOAD LD_DEBUG ZPFX ZSH_CACHE PATH #删除部分环境变量
  /bin/chroot ${CHROOT_DIR} /bin/su - root #使用绝对路径是因为$PATH已被删除
  [[ ${ENABLE_OUTPUT} = "n" ]] ||export PATH=$PATH_BK #还原$PATH
  printf '\e[2 q\033[0m'
  return 0
  exit 0
}
####################
######容器切换######
####################
CONTAINER_SWITCH(){ #用于多容器切换
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_SWITCH$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  cd /data/data/com.termux/files/usr/etc/container
  #列举已创建容器
  for i in {1..100};do
    if [[ -e container-${i}.conf ]];then
      export $(cat container-${i}.conf)
      echo -e "\e[38;5;159m[$i] $NAME"
    fi
  done
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  export $(cat /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf) >> ${LOG_FILE}
  export CONTAINER_BK=${CONTAINER}
  unset CONTAINER
  while :
  do
    read -p "[] SELECT A CONTAINER: " CONTAINER
    if [[ -e /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf ]];then
      #解除原容器挂载
      umount -lvf ${CHROOT_DIR}/dev >> ${LOG_FILE} 2>&1 #解除/dev的挂载
      umount -lvf ${CHROOT_DIR}/sys >> ${LOG_FILE} 2>&1 #解除/sys的挂载
      umount -lvf ${CHROOT_DIR}/proc >> ${LOG_FILE} 2>&1 #解除/proc挂载
      umount ${CHROOT_DIR}/sdcard >> ${LOG_FILE} 2>&1 #解除/sdcard的挂载
      umount -lvf ${CHROOT_DIR} >> ${LOG_FILE} 2>&1 #解除目录自身挂载
      losetup -d ${CHROOT_IMG} >> ${LOG_FILE} 2>&1 #解除img镜像与虚拟设备的关联
      break
    fi
  done
  CONTAINER_LOG "SET CONTAINER=${CONTAINER}"
  sed -i "s/CONTAINER=$CONTAINER_BK/CONTAINER=$CONTAINER/" /data/data/com.termux/files/usr/etc/container/global.conf
  return 0
  exit 0
}
####################
######容器设置######
####################
CONTAINER_SETTINGS(){ #用于设置容器
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-18))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_SETTINGS$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  #输出当前配置信息
  echo -e "------SETTINGS------"
  echo -e "[] ENABLE_OUTPUT:${ENABLE_OUTPUT}"
  echo -e "[] HOSTNAME:${HOSTNAME}"
  echo -e "[] CURSOR:${CURSOR}"
  echo -e "[] DISABLE_SELINUX:${DISABLE_SELINUX}"
  echo -e "[] CONTAINER:${CONTAINER}"
  read -p "PRESS ENTER TO EDIT THE CONFIG FILE OR PRESS CTRL-C TO EXIT" NULL
  nano /data/data/com.termux/files/usr/etc/container/global.conf
  CONTAINER_LOG "CHANGE SETTINGS"
  return 0
  exit 0
}
####################
######解除挂载######
####################
CONTAINER_UNMOUNT(){  #用于解除容器挂载
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  export $(cat /data/data/com.termux/files/usr/etc/container/container-${CONTAINER}.conf) >> ${LOG_FILE}
  printf "\e[38;5;159m"
  read -p "Kill progress[y/n]? " KILL
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-18))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_UNMOUNT$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  if [[ ${CHROOT_DIR} = "" ]];then #防止误将宿主机系统文件解除挂载
    CONTAINER_LOG_END&&exit
  fi
  if [[ ${KILL} = "y" ]];then
    [[ ${ENABLE_OUTPUT} = "n" ]] ||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] KILL PROGRESS,THIS MIGHT TAKE A WHILE"
    LSOF=$(lsof | awk '{print $1}' | grep -c '^lsof')
    if [ "${LSOF}" -eq 0 ]; then
      PIDS=$(lsof | grep "$CHROOT_DIR" | awk '{print $1}' | uniq)
    else
      PIDS=$(lsof | grep "$CHROOT_DIR" | awk '{print $2}' | uniq)
    fi
    if [[ -n "${PIDS}" ]]; then
      kill -9 ${PIDS} 2> /dev/null
    fi
  fi
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] UNMOUNT /dev"
  CONTAINER_LOG "UNMOUNT /dev"
  umount -lvf ${CHROOT_DIR}/dev >> ${LOG_FILE} 2>&1 #解除/dev的挂载
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] UNMOUNT /sys"
  CONTAINER_LOG "UNMOUNT /sys"
  umount -lvf ${CHROOT_DIR}/sys >> ${LOG_FILE} 2>&1 #解除/sys的挂载
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] UNMOUNT /proc"
  CONTAINER_LOG "UNMOUNT /proc"
  umount -lvf ${CHROOT_DIR}/proc >> ${LOG_FILE} 2>&1 #解除/proc挂载
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] UNMOUNT /sdcard"
  CONTAINER_LOG "UNMOUNT /sdcard"
  umount ${CHROOT_DIR}/sdcard >> ${LOG_FILE} 2>&1 #解除/sdcard的挂载
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] UNMOUNT ${CHROOT_DIR}"
  CONTAINER_LOG "UNMOUNT ${CHROOT_DIR}"
  umount -lvf ${CHROOT_DIR} >> ${LOG_FILE} 2>&1 #解除目录自身挂载
  losetup -d ${CHROOT_IMG} >> ${LOG_FILE} 2>&1 #解除img镜像与虚拟设备的关联
  if [[ ${DISABLE_SELINUX} = "y" ]];then #判断SELINUX是否为关闭状态
    [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m[\e[38;5;158m\e[38;5;159m] ENABLE SELINUX"
    CONTAINER_LOG "ENABLE SELINUX"
    setenforce 1  >> ${LOG_FILE} 2>&1 #重启SELINUX
  fi
  hostname localhost  >> ${LOG_FILE} 2>&1
  return 0
  exit 0
}
####################
######更新脚本######
####################
CONTAINER_UPDATE(){  #用于更新本脚本
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-16))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_UPDATE$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] UPDATING"
  cd /data/data/com.termux/files/usr/share/termux-container
  #使用git pull更新目录
  echo -e "\e[38;5;159m$(git reset --hard||exit)"
  echo -e "\e[38;5;159m$(git pull||exit)"
  #更新主程序
  rm /data/data/com.termux/files/usr/bin/container
  cp ./container /data/data/com.termux/files/usr/bin/
  chmod 777 /data/data/com.termux/files/usr/bin/container
  CONTAINER_LOG "UPDATE SCRIPT"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "[] UPDATE DONE"
  return 0
  exit 0
}
####################
######版本信息######
####################
CONTAINER_VERSION(){
  printf '\e[38;5;159m'
  echo -e "[] (>_×)"
  echo -e "[] NAME: TERMUX-CONTAINER"
  echo -e "[] AUTHOR: Moe-hacker"
  echo -e "[] LICENSE: GPL-V3"
  echo -e "[] NO WARRANTY"
  echo -e '[] VERSION: 4.0\033[0m'
  return 0
  exit 0
}
####################
######卸载程序######
####################
CONTAINER_UNINSTALL(){
  export $(cat /data/data/com.termux/files/usr/etc/container/global.conf) >> ${LOG_FILE}
  [[ ${ENABLE_OUTPUT} = "n" ]]||clear
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($(stty size|awk '{print $2}')))
  [[ ${ENABLE_OUTPUT} = "n" ]]||let i1=$(($i1))
  [[ ${ENABLE_OUTPUT} = "n" ]]||i1=$(($i1-19))
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[30;48;5;159mCONTAINER_UNINSTALL$(yes " "|sed $i1'q'|tr -d '\n')\033[0m"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e "\e[38;5;159m//"
  [[ ${ENABLE_OUTPUT} = "n" ]]||echo -e ""
  echo -e "\a\e[38;5;159m[] PRESS ENTER TO UNINSTALL THIS SCRIPT OR PRESS CTRL-C TO EXIT"|pv -qL 40
  read
  while :
  do
    read -p "[] REMOVE YOUR CONTAINERS [y/n]?" REMOVE_CONTAINERS
    if [[ ${REMOVE_CONTAINERS} = "n" || ${REMOVE_CONTAINERS} = "y" ]];then
      break
    fi
  done
  echo -e "\a[] UNINSTALLING"
  if [[ ${REMOVE_CONTAINERS} = "y" ]];then
    cd /data/data/com.termux/files/usr/etc/container
    for i in {1..100};do
        if [[ -e container-${i}.conf ]];then
          export $(cat /data/data/com.termux/files/usr/etc/container/container-${i}.conf)
          echo -e "[] REMOVE CONTAINER ${NAME}"|pv -qL 40
          sleep 1s
          #解除挂载,防止误删系统文件
          if [[ ! ${CHROOT_DIR} = "" ]];then #防止误将宿主机系统文件解除挂载
            umount -lvf ${CHROOT_DIR}/dev >> ${LOG_FILE} 2>&1 #解除/dev 的挂载
            umount -lvf ${CHROOT_DIR}/sys >> ${LOG_FILE} 2>&1 # 解除/sys的挂载
            umount -lvf ${CHROOT_DIR}/proc >> ${LOG_FILE} 2>&1 #解除/proc挂载
            umount ${CHROOT_DIR}/sdcard >> ${LOG_FILE} 2>&1 #解除/sdcard的挂载
            umount -lvf ${CHROOT_DIR} >> ${LOG_FILE} 2>&1 #解除目录自身 挂载
            losetup -d ${CHROOT_IMG} >> ${LOG_FILE} 2>&1 #解除img镜像与 虚拟设备的关联
            #删除容器
            if [[ ${CHROOT_DIR} != "" ]];then
              rm -rfv ${CHROOT_DIR}
            fi
            if [[ ${CHROOT_IMG} != "" ]];then
              rm -rfv ${CHROOT_IMG}
            fi
          fi
        fi
    done
  fi
  #还原设置
  hostname localhost >> ${LOG_FILE} 2>&1
  setenforce 1  >> ${LOG_FILE} 2>&1
  #删除脚本及配置
  [[ ${REMOVE_CONTAINERS} = "n" ]]||rm -rvf /data/data/com.termux/files/usr/etc/container
  rm -fv /data/data/com.termux/files/usr/etc/container/global.conf
  rm -rvf /data/data/com.termux/files/usr/share/termux-container
  rm -fv /data/data/com.termux/files/usr/bin/container
  rm -fv /data/data/com.termux/files/usr/var/log/container.log
  echo -e "[] UNINSTALL DONE"
  echo -e "[] GOODBYE!"
  return 0
  exit 0
}
####################
######程序菜单######
####################
CONTAINER_MENU(){
  printf '\e[38;5;159m'
  WIDTH=$(($(stty size|awk '{print $2}')-4))
  OPTION=$(whiptail --title "Container menu" --menu "Choose your option" 16 $WIDTH 9 \
  "1" "Run container" \
  "2" "Unmount container" \
  "3" "Create a new container" \
  "4" "Switch container"  \
  "5" "Backup container" \
  "6" "Restore container" \
  "7" "Remove container" \
  "8" "Settings" \
  "9" "Update this script" \
  "10" "Display version" \
  "11" "Uninstall this script" \
  "12" "Show helps" \
  "13" "Show logs" \
  "14" "Purge logs" \
  "15" "Exit" 3>&1 1>&2 2>&3)
  case $OPTION in
    "1") container -run;;
    "2") container -un;;
    "3") container -c;;
    "4") container -S;;
    "5") container -bk;;
    "6") read -p "Backup file:" BKFILE&&container -R $BKFILE;;
    "7") container -r;;
    "8") container -s;;
    "9") container -up;;
    "10") container -v;;
    "11") container -U;;
    "12") container -h;;
    "13") cat ${LOG_FILE};;
    "14") rm -fv ${LOG_FILE};;
    "15") exit;;
  esac
  return 0
  exit 0
}
####################
######调用函数######
####################
case $1 in  #根据$1调用函数
  *run)    CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_RUN&&CONTAINER_LOG_END;;
  *h)      CONTAINER_LOG_HEAD&&CONTAINER_HELP&&CONTAINER_LOG_END;;
  *s)      CONTAINER_LOG_HEAD&&CONTAINER_SETTINGS&&CONTAINER_LOG_END;;
  *c)      CONTAINER_LOG_HEAD&&CONTAINER_CREATE&&CONTAINER_LOG_END;;
  *up)     CONTAINER_LOG_HEAD&&CONTAINER_UPDATE&&CONTAINER_LOG_END;;
  *m)      CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_MOUNT&&CONTAINER_LOG_END;;
  *r)      CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_REMOVE&&CONTAINER_LOG_END;;
  *R)      CONTAINER_LOG_HEAD&&CONTAINER_RESTORE $2&&CONTAINER_LOG_END;;
  *bk)     CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_BACKUP&&CONTAINER_LOG_END;;
  *S)      CONTAINER_LOG_HEAD&&CONTAINER_SWITCH&&CONTAINER_LOG_END;;
  *v)      CONTAINER_LOG_HEAD&&CONTAINER_VERSION&&CONTAINER_LOG_END;;
  *U)      CONTAINER_LOG_HEAD&&CONTAINER_UNINSTALL&&CONTAINER_LOG_END;;
  *un)     CONTAINER_LOG_HEAD&&CHECKOUT&&CONTAINER_UNMOUNT&&CONTAINER_LOG_END;;
  "")      CONTAINER_MENU;;
  *)       CONTAINER_LOG_HEAD&&CONTAINER_HELP&&CONTAINER_LOG_END;;
esac
####################
######水个注释######
####################
#                   _ooOoo_
#                  o8888888o
#                  88" . "88
#                  (| -_- |)
#                  O\  =  /O
#               ____/`---'\____
#             .'  \\|     |//  `.
#            /  \\|||  :  |||//  \
#           /  _||||| -:- |||||-  \
#           |   | \\\  -  /// |   |
#           | \_|  ''\---/''  |   |
#           \  .-\__  `-`  ___/-. /
#         ___`. .'  /--.--\  `. . __
#      ."" '<  `.___\_<|>_/___.'  >'"".
#     | | :  `- \`.;`\ _ /`;.`/ - ` : | |
#     \  \ `-.   \_ __\ /__ _/   .-` /  /
#======`-.____`-.___\_____/___.-`____.-'======
#                   `=---='
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#           佛祖保佑        永无BUG
#
#没人比我更懂水注释(👻)
#copyright 2022 Moe-hacker (Author)
# ██╗ ██╗  ███████╗   ████╗   ███████╗
#████████╗ ██╔════╝ ██╔═══██╗ ██╔════╝
#╚██╔═██╔╝ █████╗   ██║   ██║ █████╗
#████████╗ ██╔══╝   ██║   ██║ ██╔══╝
#╚██╔═██╔╝ ███████╗ ╚██████╔╝ ██║
# ╚═╝ ╚═╝  ╚══════╝  ╚═════╝  ╚═╝
