#!/data/data/com.termux/files/usr/bin/bash
#########用于挂载系统并运行chroot#########
#加载配置文件
if [[ ! -e /data/data/com.termux/files/usr/etc/container.conf ]];then # 判断配置文件是否存在
  echo -e "\033[31m[ERR!]  container.conf does not exist. Please run  container configure \033[0m"
  exit
else
  export $(cat /data/data/com.termux/files/usr/etc/container.conf) #加载配置
fi
#没用的输出，美其名曰，赛博朋克
[[ ${OUTPUT} = "n" ]] || clear
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31mTERMUX-CONTAINER\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31mBY MOE-HACKER\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31mGPL-V3 LICENSE\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m//\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e ""
[[ ${OUTPUT} = "n" ]] || echo -e "\033[41;37mLOADING...                            \033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e ""
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m//\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e ""
[[ ${OUTPUT} = "n" ]] || sleep 0.3s
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31mCONTAINER WITH CHROOT\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31mNO WARRANTY\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31mKERNEL $(uname --kernel-release)\033[0m"
[[ ${OUTPUT} = "n" ]] || sleep 1s
[[ ${OUTPUT} = "n" ]] || echo -e ""
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m            o            o\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m             o          o\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m             +hydNNNNdyh+\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m           +mMMMMMMMMMMMMm+\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m          dMM::NMMMMMMN::MMd \033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m         hMMMMMMMMMMMMMMMMMMh\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m    ╔═║  ╔═   ╔═   ╔═║  ╔═║  ║  ╔═"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m    ╔═║  ║ ║  ║ ║  ╔╔╝  ║ ║  ║  ║ ║"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m    ╝ ╝  ╝ ╝  ══   ╝ ╝  ══╝  ╝  ══"
[[ ${OUTPUT} = "n" ]] || echo -e ""
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1001011 1100101 1100101 1110000 0100000\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1101101 1101111 1100101 1011000 1101011\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100101 1100101 1110000 1000000 1100011\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1101111 1101111 1101100 1011000 1101011\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100101 1100101 1110000 1000000 1101000\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100001 1100011 1101011 1101000 1101110\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100111 1011001 1101011 1100101 1100101\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1110000 1000001 1100110 1101001 1111001\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1101001 1101110 1100111 1011100 0001010\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1011011 1011011 1011010 1011010 1010100\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100001 1101100 1101011 1000000 1101001\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1110011 1000000 1100011 1101000 1100101\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100001 1110000 1011000 1110011 1101000\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1101111 1110111 1000000 1101101 1100101\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1000001 1110100 1101000 1100101 0100000\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100011 1101111 1100100 1100101 0101110\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1101001 1101110 1100111 1011100 0001010\033[0m"
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m1100001 1100011 1101011 1101000 1101110\033[0m"
if [[ ! $(whoami) = "root" ]];then #判断用户，如果不是root直接报错关闭，此处无root证明设备未获得root权限
  echo -e "\033[31m[ERR!]  To run the script,you need to root your Device\033[0m"
  exit
else
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Check] Running as root\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
fi
if [[ ! -e ${CHROOT_DIR} ]];then #判断容器是否存在
  echo -e "\033[31m[ERR!] Container directory does not exist\033[0m"
  exit
fi
if [[ !${CHROOT_IMG} = "" ]] && [[ ! -e ${CHROOT_IMG} ]];then #如果使用容器镜像，判断其是否存在
  echo -e "\033[31m[ERR!] Image file does not exist \033[0m"
  exit
fi
if [[ ${SELINUX} = "y" ]];then #判断是否需要关闭selinux
  if [[ ! $(getenforce) = "Permissive" ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Disable SELinux\033[0m"
    [[ ${SLEEP} = "n" ]] || sleep 0.3s
    setenforce 0 >/dev/null 2>&1 #关闭SELinux [!]危险操作
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Disable SELinux\033[0m"
  fi
fi
if [[ ! ${HOSTNAME} = "" ]];then #判断主机名设置是否为空值
  if [[ ! $(hostname) = ${HOSTNAME} ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Set hostname\033[0m"
    [[ ${SLEEP} = "n" ]] || sleep 0.3s
    hostname ${HOSTNAME} >/dev/null 2>&1 #设置主机名
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Set hostname\033[0m"
  fi
fi
############################################
#####  下面这段借鉴了andrax的启动脚本  #####
#####加入把系统安装在 img镜像文件的选项#####
#####    修复了镜像文件结构需要清理    #####
#####           加入一些判断           #####
#####  修复了sudo无法使用(未完全解决)  #####
#####    修复了pacman无法分析挂载点    #####
#####    修复未设置dns导致无法联网     #####
#####      加入没啥用的输出和停顿      #####
############################################
#创建一些由于android和普通linux之间的差异而不存在的文件
if [[ ! -e /dev/fd ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat /dev/fd\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd /dev/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat /dev/fd\033[0m"
fi
if [[ ! -e /dev/stdin ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat /dev/stdin\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd/0 /dev/stdin  >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat /dev/stdin\033[0m"
fi
if [[ ! -e /dev/stdout ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat /dev/stdout\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd/1 /dev/stdout >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat /dev/stdout \033[0m"
fi
if [[ ! -e /dev/stderr ]] ;then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat /dev/stderr\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd/2 /dev/stderr >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat /dev/stderr\033[0m"
fi
if [[ ! -e /dev/tty0 ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat /dev/tty0\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  ln -s /dev/null /dev/tty0 >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat  /dev/tty0\033[0m"
fi
if [[ ! -e /dev/net/tun ]];then
  if [[ ! -d /dev/net ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat /dev/net\033[0m"
    [[ ${SLEEP} = "n" ]] || sleep 0.3s
    mkdir -p /dev/net >/dev/null 2>&1
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat /dev/net\033[0m"
   fi
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat /dev/net/tun\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mknod /dev/net/tun c 10 200  >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat /dev/net/tun\033[0m"
fi
#挂载系统
if [[ $(mount|grep ${CHROOT_DIR}) =  "" ]];then #判断容器自身是否被挂载，由于容器自身在运行脚本时第一个被挂载，故采用判断挂载点是否为空的方法
  if [[ ${CHROOT_IMG} = "" ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] ReMount /data\033[0m"
    [[ ${SLEEP} = "n" ]] || sleep 0.3s
    mount -o remount,suid /data  >/dev/null 2>&1 #将data 分区重新挂载，启用suid,解决sudo由于nosuid挂载无法使用问题( 解决了，但没完全解决，对于一些采用vab分区的手机可能无效，比如我的k40pro就是vab分区，所以无效)
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  ReMount /data\033[0m"
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount ${CHROOT_DIR} \033[0m"
    [[ ${SLEEP} = "n" ]] || sleep 0.3s
    mount --rbind ${CHROOT_DIR} ${CHROOT_DIR} >/dev/null 2>&1 #将容器目录挂载到自身，解决pacman无法使用
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount ${CHROOT_DIR} \033[0m"
  else
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Run fsck\033[0m"
    [[ ${SLEEP} = "n" ]] || sleep 0.3s
    fsck.ext4 -a -f  ${CHROOT_IMG} >/dev/null 2>&1 #修复结构需要清理报错，有一定效果
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Run fsck\033[0m"
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount ${CHROOT_IMG} \033[0m"
    [[ ${SLEEP} = "n" ]] || sleep 0.3s
    loop=$(losetup -f) #查找未使用的loop文件
    losetup  ${loop} ${CHROOT_IMG}  >/dev/null 2>&1
    mount  ${loop} ${CHROOT_DIR}  >/dev/null 2>&1
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount ${CHROOT_IMG} \033[0m"
  fi
fi
#创建rootfs中可能不存在的文件,暂时不加输出
if [[ ! -e ${CHROOT_DIR}/dev || ! -e ${CHROOT_DIR}/proc || ! -e ${CHROOT_DIR}/sys ]]; then
  [[ -e ${CHROOT_DIR}/dev ]] || mkdir ${CHROOT_DIR}/dev
  [[ -e ${CHROOT_DIR}/proc ]] || mkdir ${CHROOT_DIR}/proc
  [[ -e ${CHROOT_DIR}/sys ]] || mkdir ${CHROOT_DIR}/sys 
fi
#修复网络问题
if [[ $(cat ${CHROOT_DIR}/etc/hosts|grep ${HOSTNAME}) = "" ]];then
  echo 127.0.0.1 ${HOSTNAME} >> ${CHROOT_DIR}/etc/hosts #修复sudo报错无法解析主机
fi
if [[ -L ${CHROOT_DIR}/etc/resolv.conf || ! -e ${CHROOT_DIR}/etc/resolv.conf ]];then
  rm -f ${CHROOT_DIR}/etc/resolv.conf >/dev/null 2>&1
  echo nameserver 114.114.114.114 >> ${CHROOT_DIR}/etc/resolv.conf #解决未设置dns导致无法联网
fi
#挂载内置存储，由于解除挂载会导致宿主机/sdcard无法访问，此处弃坑
if [[ $(mount|grep ${CHROOT_DIR}|grep /sdcard) =  "" ]];then #判断/proc是 否被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount /sdacrd\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mkdir ${CHROOT_DIR}/sdcard >/dev/null 2>&1
  mount -o ro,bind /sdcard ${CHROOT_DIR}/sdcard/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount /sdacrd\033[0m"
fi
#挂载系统文件
if [[ $(mount|grep ${CHROOT_DIR}|grep /proc) =  "" ]];then #判断/proc是 否被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount /proc\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mount -t proc proc  ${CHROOT_DIR}/proc/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount /proc\033[0m"
fi
if [[ ! -e ${CHROOT_DIR}/dev/block ]];then #判断/dev是否被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount /dev\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mount --rbind /dev ${CHROOT_DIR}/dev/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount /dev\033[0m"
fi
if [[ $(mount|grep ${CHROOT_DIR}|grep /sys) =  "" ]];then #判断/sys是否 被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount /sys\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mount --rbind /sys ${CHROOT_DIR}/sys/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount /sys\033[0m"
fi
#挂载一些文件到系统，我也不知道为啥，貌似原项目就这样写的
if [[ ! -e /dev/shm ]] || [[ ! -e ${CHROOT_DIR}/dev/shm ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Creat directory /dev/shm\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mkdir -p /dev/shm ${CHROOT_DIR}/dev/shm >/dev/null 2>&1 #创建/dev/shm
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Creat directory /dev/shm\033[0m"
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount tmpfs\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mount -o rw,nosuid,nodev,mode=1777 -t tmpfs tmpfs /dev/shm >/dev/null 2>&1 #挂载tmpfs
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount tmpfs\033[0m"
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount /dev/shm\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mount --bind /dev/shm ${CHROOT_DIR}/dev/shm >/dev/null 2>&1 #挂载/dev/shm
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount /dev/shm\033[0m"
fi
if  [[ ! -e ${CHROOT_DIR}/dev/pts/1 ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Mount /dev/pts\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  mkdir ${CHROOT_DIR}/dev/pts >/dev/null 2>&1
  mount --bind /dev/pts ${CHROOT_DIR}/dev/pts >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Mount /dev/pts\033[0m"
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Change mode of /dev/null\033[0m"
  [[ ${SLEEP} = "n" ]] || sleep 0.3s
  chmod 666 /dev/null >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Done]  Change mode of /dev/null\033[0m"
fi
[[ ${OUTPUT} = "n" ]] || echo -e "\033[31m[Start] Run chroot\033[0m"
[[ ${SLEEP} = "n" ]] || sleep 0.3s
unset TMP TEMP TMPDIR LD_PRELOAD LD_DEBUG ZPFX ZSH_CACHE PATH #删除部分环境变量
/bin/chroot ${CHROOT_DIR} /bin/su - root
