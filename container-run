#!/data/data/com.termux/files/usr/bin/bash
#########用于挂载系统并运行chroot#########
export $(cat /data/data/com.termux/files/usr/etc/container.conf) >> /dev/null
export $(cat /data/data/com.termux/files/usr/etc/container.conf.d/container-${CONTAINER}.conf) >> /dev/null
[[ ${OUTPUT} = "n" ]] ||i1=$(($(stty size|awk '{print $2}')))
[[ ${OUTPUT} = "n" ]] ||let i1=$i1
[[ ${OUTPUT} = "n" ]] ||i4=$(($i1/2-24))
[[ ${OUTPUT} = "n" ]] ||clear
[[ ${OUTPUT} = "n" ]] ||printf '\033[?25l'
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mLOADING"
[[ ${OUTPUT} = "n" ]] ||i2=7
[[ ${OUTPUT} = "n" ]] ||while (( $i2<=$i1 ));do;i2=$(($i2+1));echo -e "\033[38;5;123m\033[1H\033[${i2}G/";sleep 0.01s;done
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mTERMUX-CONTAINER\033[0m"
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mGPL-V3 LICENSE\033[0m"
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mNO WARRANTY\033[0m"
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m//\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||i2=0
[[ ${OUTPUT} = "n" ]] ||while (( $i2<=$i1 ));do;i2=$(($i2+1));echo -e "\033[38;5;123m\033[8H\033[${i2}G<";sleep 0.01s;done
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m\033[${i4}G╔═╝  ╔═║  ╔═   ═╔╝  ╔═║  ╝  ╔═   ╔═╝  ╔═║\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m\033[${i4}G║    ║ ║  ║ ║   ║   ╔═║  ║  ║ ║  ╔═╝  ╔╔╝\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m\033[${i4}G══╝  ══╝  ╝ ╝   ╝   ╝ ╝  ╝  ╝ ╝  ══╝  ╝ ╝\033[0m"
[[ ${OUTPUT} = "n" ]] ||i2=0
[[ ${OUTPUT} = "n" ]] ||while (( $i2<=$i1 ));do;i2=$(($i2+1));echo -e "\033[38;5;123m\033[12H\033[${i2}G>";sleep 0.01s;done
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m//\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mCONTAINER ${NAME}\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mARCH $(uname -m)\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mKERNEL $(uname --kernel-release)\033[0m"
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mTIME $(date|awk '{print $4}')\033[0m"
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mHOST $(hostname)\033[0m"
[[ ${OUTPUT} = "n" ]] ||sleep 0.3s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mANDROID $(neofetch |grep Android|awk '{print $3}')\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m┌─────────────────────────┐\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│LINUX               o o o│\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│─────────────────────────│\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│CONTAINER                │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│~# echo Hello-Word       │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│Hello-Word┌────────────────────────────────┐\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│~#        │ANDROID                    o o o│──┐\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│          │────────────────────────────────│ o│\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│          │         o            o         │──│\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m│          │          o          o          │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m└──────────│          +hydNNNNdyh+          │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │        +mMMMMMMMMMMMMm+        │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │       dMM::NMMMMMMN::MMd       │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │      hMMMMMMMMMMMMMMMMMMh      │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │  ..  yyyyyyyyyyyyyyyyyyyy  ..  │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │.mMMm MMMMMMMMMMMMMMMMMMMM mMMm.│  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │:MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:│  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │:MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:│  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │:MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:│  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │:MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:│  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │-MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM-│  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │ +yy+ MMMMMMMMMMMMMMMMMMMM +yy+ │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │      mMMMMMMMMMMMMMMMMMMm      │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │       /++MMMMh++hMMMM++/       │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │          MMMMo  oMMMM          │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │          MMMMo  oMMMM          │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │          oNMm-  -mMNs          │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │ ╔═║  ╔═   ╔═   ╔═║  ╔═║  ╝  ╔═ │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │ ╔═║  ║ ║  ║ ║  ╔╔╝  ║ ║  ║  ║ ║│  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           │ ╝ ╝  ╝ ╝  ══   ╝ ╝  ══╝  ╝  ══ │  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m           └────────────────────────────────┘  │\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m             └─────────────────────────────────┘\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m//\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123mNEVER SETTLE\033[0m"
[[ ${OUTPUT} = "n" ]] ||echo -e ""
[[ ${OUTPUT} = "n" ]] ||sleep 0.1s
[[ ${OUTPUT} = "n" ]] ||echo -e "\033[38;5;123m//"
[[ ${OUTPUT} = "n" ]] ||echo -e ""
if [[ ! -e ${CHROOT_DIR} ]];then #判断容器是否存在
  echo -e "\033[38;5;123m[ERR!] CONTAINER DIRECTORY DOES NOT EXIST\033[0m"
  exit
fi
if [[ !${CHROOT_IMG} = "" ]] && [[ ! -e ${CHROOT_IMG} ]];then #如果使用容器镜像，判断其是否存在
  echo -e "\033[38;5;123m[ERR!] IMAGE FILE DOES NOT EXIST \033[0m"
  exit
fi
if [[ ${SELINUX} = "y" ]];then #判断是否需要关闭selinux
  if [[ ! $(getenforce) = "Permissive" ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] DISABLE SELINUX\033[0m"
    [[ ${OUTPUT} = "n" ]] || sleep 0.3s
    setenforce 0 >/dev/null 2>&1 #关闭SELINUX [!]危险操作
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] DISABLE SELINUX\033[0m"
  fi
fi
if [[ ! ${HOSTNAME} = "" ]];then #判断主机名设置是否为空值
  if [[ ! $(hostname) = ${HOSTNAME} ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] SET HOSTNAME\033[0m"
    [[ ${OUTPUT} = "n" ]] || sleep 0.3s
    hostname ${HOSTNAME} >/dev/null 2>&1 #设置主机名
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] SET HOSTNAME\033[0m"
  fi
fi
############################################
#####  下面这段借鉴了andrax的启动脚本  #####
#####加入把系统安装在 img镜像文件的选项#####
#####    修复了镜像文件结构需要清理    #####
#####        mount前加入一些判断       #####
#####  修复了sudo无法使用(未完全解决)  #####
#####    修复了pacman无法分析挂载点    #####
#####    修复未设置dns导致无法联网     #####
#####      加入没啥用的输出和停顿      #####
############################################
#创建一些由于android和普通linux之间的差异而不存在的文件
if [[ ! -e /dev/fd ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE /dev/fd\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd /dev/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE /dev/fd\033[0m"
fi
if [[ ! -e /dev/stdin ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE /dev/stdin\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd/0 /dev/stdin  >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE /dev/stdin\033[0m"
fi
if [[ ! -e /dev/stdout ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE /dev/stdout\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd/1 /dev/stdout >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE /dev/stdout \033[0m"
fi
if [[ ! -e /dev/stderr ]] ;then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE /dev/stderr\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  ln -s /proc/self/fd/2 /dev/stderr >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE /dev/stderr\033[0m"
fi
if [[ ! -e /dev/tty0 ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE /dev/tty0\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  ln -s /dev/null /dev/tty0 >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE  /dev/tty0\033[0m"
fi
if [[ ! -e /dev/net/tun ]];then
  if [[ ! -d /dev/net ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE /dev/net\033[0m"
    [[ ${OUTPUT} = "n" ]] || sleep 0.3s
    mkdir -p /dev/net >/dev/null 2>&1
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE /dev/net\033[0m"
   fi
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE /dev/net/tun\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mknod /dev/net/tun c 10 200  >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE /dev/net/tun\033[0m"
fi
#挂载系统
if [[ $(mount|grep ${CHROOT_DIR}) =  "" ]];then #判断容器自身是否被挂载，由于容器自身在运行脚本时第一个被挂载，故采用判断挂载点是否为空的方法
  if [[ ${CHROOT_IMG} = "" ]];then
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] REMOUNT /data\033[0m"
    [[ ${OUTPUT} = "n" ]] || sleep 0.3s
    mount -o remount,suid /data  >/dev/null 2>&1 #将data 分区重新挂载，启用suid,解决sudo由于nosuid挂载无法使用问题( 解决了，但没完全解决，对于一些采用vab分区的手机可能无效，比如我的k40pro就是vab分区，所以无效)
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] REMOUNT /data\033[0m"
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT ${CHROOT_DIR} \033[0m"
    [[ ${OUTPUT} = "n" ]] || sleep 0.3s
    mount --rbind ${CHROOT_DIR} ${CHROOT_DIR} >/dev/null 2>&1 #将容器目录挂载到自身，解决pacman无法使用
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT ${CHROOT_DIR} \033[0m"
  else
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] RUN FSCK\033[0m"
    [[ ${OUTPUT} = "n" ]] || sleep 0.3s
    fsck.ext4 -a -f  ${CHROOT_IMG} >/dev/null 2>&1 #修复结构需要清理报错，有一定效果
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] RUN FSCK\033[0m"
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT ${CHROOT_IMG} \033[0m"
    [[ ${OUTPUT} = "n" ]] || sleep 0.3s
    loop=$(losetup -f) #查找未使用的loop文件
    losetup  ${loop} ${CHROOT_IMG}  >/dev/null 2>&1
    mount  ${loop} ${CHROOT_DIR}  >/dev/null 2>&1
    [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT ${CHROOT_IMG} \033[0m"
  fi
fi
#创建rootfs中可能不存在的文件,暂时不加输出
if [[ ! -e ${CHROOT_DIR}/dev || ! -e ${CHROOT_DIR}/proc || ! -e ${CHROOT_DIR}/sys ]]; then
  [[ -e ${CHROOT_DIR}/dev ]] || mkdir ${CHROOT_DIR}/dev
  [[ -e ${CHROOT_DIR}/proc ]] || mkdir ${CHROOT_DIR}/proc
  [[ -e ${CHROOT_DIR}/sys ]] || mkdir ${CHROOT_DIR}/sys
fi
#修复网络问题
if [[ $(cat ${CHROOT_DIR}/etc/hosts|grep ${HOSTNAME}) = "" ]];then
  echo 127.0.0.1 ${HOSTNAME} >> ${CHROOT_DIR}/etc/hosts #修复sudo报错无法解析主机
fi
if [[ -L ${CHROOT_DIR}/etc/resolv.conf || ! -e ${CHROOT_DIR}/etc/resolv.conf ]];then
  rm -f ${CHROOT_DIR}/etc/resolv.conf >/dev/null 2>&1
  echo nameserver 114.114.114.114 >> ${CHROOT_DIR}/etc/resolv.conf #解决未设置dns导致无法联网
fi
#挂载内置存储，由于解除挂载会导致宿主机/sdcard无法访问，此处弃坑
if [[ $(mount|grep ${CHROOT_DIR}|grep /sdcard) =  "" ]];then #判断/proc是 否被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT /sdacrd\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mkdir ${CHROOT_DIR}/sdcard >/dev/null 2>&1
  mount -o ro,bind /sdcard ${CHROOT_DIR}/sdcard/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT /sdacrd\033[0m"
fi
#挂载系统文件
if [[ $(mount|grep ${CHROOT_DIR}|grep /proc) =  "" ]];then #判断/proc是 否被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT /proc\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mount -t proc proc  ${CHROOT_DIR}/proc/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT /proc\033[0m"
fi
if [[ ! -e ${CHROOT_DIR}/dev/block ]];then #判断/dev是否被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT /dev\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mount --rbind /dev ${CHROOT_DIR}/dev/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT /dev\033[0m"
fi
if [[ $(mount|grep ${CHROOT_DIR}|grep /sys) =  "" ]];then #判断/sys是否 被挂载
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT /sys\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mount --rbind /sys ${CHROOT_DIR}/sys/ >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT /sys\033[0m"
fi
#挂载一些文件到系统，我也不知道为啥，貌似原项目就这样写的
if [[ ! -e /dev/shm ]] || [[ ! -e ${CHROOT_DIR}/dev/shm ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE DIRECTORY /dev/shm\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mkdir -p /dev/shm ${CHROOT_DIR}/dev/shm >/dev/null 2>&1 #创建/dev/shm
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE DIRECTORY /dev/shm\033[0m"
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CREATE tmpfs\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mount -o rw,nosuid,nodev,mode=1777 -t tmpfs tmpfs /dev/shm >/dev/null 2>&1 #挂载tmpfs
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CREATE tmpfs\033[0m"
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT /dev/shm\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mount --bind /dev/shm ${CHROOT_DIR}/dev/shm >/dev/null 2>&1 #挂载/dev/shm
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT /dev/shm\033[0m"
fi
if  [[ ! -e ${CHROOT_DIR}/dev/pts/1 ]];then
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] MOUNT /dev/pts\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  mkdir ${CHROOT_DIR}/dev/pts >/dev/null 2>&1
  mount --bind /dev/pts ${CHROOT_DIR}/dev/pts >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] MOUNT /dev/pts\033[0m"
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] CHANGE MODE OF /dev/null\033[0m"
  [[ ${OUTPUT} = "n" ]] || sleep 0.3s
  chmod 666 /dev/null >/dev/null 2>&1
  [[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[DONE ] CHANGE MODE OF /dev/null\033[0m"
fi
[[ ${OUTPUT} = "n" ]] || echo -e "\033[38;5;123m[START] RUN CONTAINER\033[0m"
[[ ${OUTPUT} = "n" ]] || sleep 0.3s
case $CUSOR in #更换光标
  block)     printf '\e[2 q';;
  bar)       printf '\e[6 q';;
  underline) printf '\e[4 q';;
esac
[[ ${OUTPUT} = "n" ]] || printf "\033[?25h"
unset TMP TEMP TMPDIR LD_PRELOAD LD_DEBUG ZPFX ZSH_CACHE PATH #删除部分环境变量
/bin/chroot ${CHROOT_DIR} /bin/su - root
[[ ${OUTPUT} = "n" ]] ||/bin/echo -e "\033[\033[38;5;123m//\033[0m"
[[ ${OUTPUT} = "n" ]] ||/bin/echo -e ""
[[ ${OUTPUT} = "n" ]] ||/bin/echo -e "\033[46;37mEXIT                                                                  \033[0m" 
[[ ${OUTPUT} = "n" ]] ||/bin/echo -e ""
[[ ${OUTPUT} = "n" ]] ||/bin/echo -e "\033[\033[38;5;123m//\033[0m"
printf '\e[2 q'
